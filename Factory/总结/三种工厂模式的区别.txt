简单工厂：
只有一个工厂类，根据传递的参数返回不同的产品实例。
优点：实现简单。
缺点：1.容易出现参数传递错误造成的系统异常。2.违背了开闭原则，每增加一种产品会修改工厂中的源码，拓展性较差。

工厂方法：
有一个工厂的超类，有不同的工厂子类，每一种工厂子类只会创建一种产品。
优点：1.解决了简单工厂需要传递参数创建实例的问题，工厂与产品一一对应。2.遵循开闭原则，拓展性佳，新增产品只需要新增新的工厂。
缺点：在产品种类较多，或者属于同一个产品族的产品，工厂实例过多。

抽象工厂：
也有一个工厂超类，与抽象工厂的不同点在于引入了产品族的概念，即一个工厂子类，可以有多个方法，获取同一个产品族中的不同产品等级结构的产品。
优点：1.解决了工厂方法中，产品种类过多引起的工厂实例多的问题。2.拓展性好
缺点：在工厂中新增一种产品等级结构时，会修改工厂超类或接口，导致每一个子类都要去实现新增的抽象方法。

抽象工厂由于其极佳的拓展性，在项目中广泛使用。针对其缺点，可以在项目中约定，每过一段时间的统一升级工厂的产品，一次性解决实现新的抽象方法的问题。
同时，这个问题也可以使用接口继承的方式处理。